// http://raganwald.com/

// https://stackoverflow.com/questions/27642239/what-is-polymorphism-in-javascript

// https://www.youtube.com/watch?v=O8wwnhdkPE4
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
//https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know
//https://www.youtube.com/watch?v=HkFlM73G-hk&list=PLoYCgNOIyGABs-wDaaxChu82q_xQgUb4f
//https://www.youtube.com/watch?v=mG20htjwoBY&index=9&list=PLrzrNeNx3kNHsaPfrpPo0AlW-MhJE6gOA


OOP in Javascript

What is OOP (Object Oriented Programming)?
- General introduction

Tenets of OOP
- Polymorphism (designing objects to share behaviors and to be able to override shared behaviors with specific ones. Polymorphism takes advantage of inheritance in order to make this happen.)
- Super and sub classes

- modularity
- Polymorphism
- encapsulation

// Namespace
// A container which lets developers bundle all functionality under a unique, application-specific name.

// Class
// Defines the object's characteristics. A class is a template definition of an object's properties and methods.

// Object
// An instance of a class.

// Property
// An object characteristic, such as color.

// Method
// An object capability, such as walk. It is a subroutine or function associated with a class.

// Constructor
// A method called at the moment an object is instantiated. It usually has the same name as the class containing it.

// Inheritance
// A class can inherit characteristics from another class.

// Encapsulation
// A technique which involves bundling the data and the methods that use the data together.

// Abstraction
// The conjunction of an object's complex inheritance, methods, and properties must adequately reflect a reality model.

// Polymorphism
// Poly means "many" and morphism means "forms". Different classes might define the same method or property.


// Class
var Person = function (firstName) {
	this.firstName = firstName;
};

// Class instance
var firstPerson = new Person('Alice');
var secondPerson = new Person('Bob');

console.log('firstPerson is ' + firstPerson.firstName);
console.log('secondPerson is ' + secondPerson.firstName);

// Prototype


Dus:

- Object Oriented Programming in Javascript (ES5 & ES6)
- Commenly used design patterns in Javascript
- Modular javascript (with Require.js)

var dom = {

	generateId: function() {
		return "customId" + this._counter++;
	},
	create: function (tageName, id) {
		var el = document.createElement(tagName);

		if (id) {
			el.id = id || this.generateId();
		}

		return el;
	}
}

// Module pattern, hide variables and grant access only where needed
var dom = (function (jq) {
	var _counter: 0;

	function generateId() {
		return "customId" + _counter++;
	}

	function create(tageName, id) {
		var el = document.createElement(tagName);

		if (id) {
			el.id = id || generateId();
		}

		return el;
	}

	return {
		generateId: generateId,
		create: create
	};
}(jQuery));

